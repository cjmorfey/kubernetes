#!groovy
properties([disableConcurrentBuilds()])
pipeline {
    agent {
        label 'slave'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
        ansiColor("xterm")
    }
    stages {
        stage("Install istio to k8s cluster") {
            input {
                message "Istio system will be installed"
                id "simple-input"
            }
            steps {
                echo " ==========Installing istio========= "
                sh 'istioctl install --set profile=demo -y'
            }
        }
        stage("Create NS") {
            steps {
                echo " ==========Create NS========= "
                sh 'kubectl create namespace webserver'
            }
        }
        stage("Injekting istio") {
            steps {
                echo " ==========Ingekting NS========= "
                sh 'kubectl label namespace webserver istio-injection=enabled'
            }
        }
        stage("Git pull") {
            steps {
                echo " ==========Git PULL========= "
                sh 'cd /root/workspace/service-mesh/istio/install_istio/kubernetes && git pull'
                sh 'pwd'
                sh 'ls -la'
            }
        }
        stage("Deploy the sample application") {
            steps {
                echo " ==========Deploy the sample application========= "
                sh 'kubectl apply -f /root/workspace/service-mesh/istio/install_istio/kubernetes/service-mesh/istio/bookinfo.yaml'
            }
        }
        stage("Open the application to outside traffic") {
            steps {
                sh 'kubectl apply -f /root/workspace/service-mesh/istio/install_istio/kubernetes/service-mesh/istio/bookinfo-gateway.yaml'
                sh 'istioctl analyze'
            }
        }
        stage("Determining the ingress IP and ports") {
            steps {
                sh 'kubectl get svc istio-ingressgateway -n istio-system'
            }
        }
    }
}
